/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src.test.java.rita;


import org.junit.Test;

import rita.*;
import static org.junit.Assert.*;


public class ConjugatorTests {
	
	


    @Test 
    public void testPastParticiple() {


        assertEquals(RiTa.pastParticiple("sleep"), "slept");
        assertEquals(RiTa.pastParticiple("withhold"), "withheld");

        assertEquals(RiTa.pastParticiple("cut"), "cut");
        assertEquals(RiTa.pastParticiple("go"), "gone");
        assertEquals(RiTa.pastParticiple("swim"), "swum");
        assertEquals(RiTa.pastParticiple("would"), "would");
        assertEquals(RiTa.pastParticiple("might"), "might");
        assertEquals(RiTa.pastParticiple("run"), "run");
        assertEquals(RiTa.pastParticiple("speak"), "spoken");
        assertEquals(RiTa.pastParticiple("break"), "broken");
        assertEquals(RiTa.pastParticiple(""), "");

        // PROBLEMS

        assertEquals(RiTa.pastParticiple("awake"), "awoken");
        assertEquals(RiTa.pastParticiple("become"), "became");
        assertEquals(RiTa.pastParticiple("drink"), "drunk");
        assertEquals(RiTa.pastParticiple("plead"), "pled");
        assertEquals(RiTa.pastParticiple("run"), "run");
        assertEquals(RiTa.pastParticiple("shine"), "shone");
        // or shined
        assertEquals(RiTa.pastParticiple("shrink"), "shrunk");
        // or shrunken
        assertEquals(RiTa.pastParticiple("stink"), "stunk");
        assertEquals(RiTa.pastParticiple("study"), "studied");
    }
    
    @Test 
    public void testPresentParticiple() {


        assertEquals(RiTa.presentParticiple("sleep"), "sleeping");
        assertEquals(RiTa.presentParticiple("withhold"), "withholding");

        assertEquals(RiTa.presentParticiple("cut"), "cutting");
        assertEquals(RiTa.presentParticiple("go"), "going");
        assertEquals(RiTa.presentParticiple("run"), "running");
        assertEquals(RiTa.presentParticiple("speak"), "speaking");
        assertEquals(RiTa.presentParticiple("break"), "breaking");
        assertEquals(RiTa.presentParticiple("become"), "becoming");
        assertEquals(RiTa.presentParticiple("plead"), "pleading");
        assertEquals(RiTa.presentParticiple("awake"), "awaking");
        assertEquals(RiTa.presentParticiple("study"), "studying");

        assertEquals(RiTa.presentParticiple("lie"), "lying");
        assertEquals(RiTa.presentParticiple("swim"), "swimming");
        assertEquals(RiTa.presentParticiple("run"), "running");
        assertEquals(RiTa.presentParticiple("dig"), "digging");
        assertEquals(RiTa.presentParticiple("set"), "setting");
        assertEquals(RiTa.presentParticiple("speak"), "speaking");
        assertEquals(RiTa.presentParticiple("bring"), "bringing");
        assertEquals(RiTa.presentParticiple("speak"), "speaking");

        assertEquals(RiTa.presentParticiple("study "), "studying");
        //space
        assertEquals(RiTa.presentParticiple(" study"), "studying");
        //space
        assertEquals(RiTa.presentParticiple("study  "), "studying");
        //double space
        assertEquals(RiTa.presentParticiple("  study"), "studying");
        //double space
        assertEquals(RiTa.presentParticiple("study    "), "studying");
        //tab space
        assertEquals(RiTa.presentParticiple(" study"), "studying");
        //tab space
        assertEquals(RiTa.presentParticiple(""), "");
      }
      
      @Test 
      public void testConjugate() {
    	  Map<String,String> args = new HashMap<>(); //TODO use Map<String,String> here?
    	 // Map<String, Integer> left = ImmutableMap.of("a", 1, "b", 2, "c", 3);
        
        String[] s;
        String[] a;

        assertEquals("swum", RiTa.pastParticiple("swim"));
        return;
        assertEquals(RiTa.conjugate("be", { form: RiTa.GERUND, }), "being");

        s = new String[]{"swim", "need", "open"};
        a = new String[]{"swims", "needs", "opens"};

        args = {
          tense: RiTa.PRESENT_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON
        };

        for (int i = 0; i < s.length; i++) {
          String[] c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          tense: RiTa.PRESENT_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON,
          passive: true
        };

        a = new String[] {"is swum", "is needed", "is opened"};
        for (int i = 0; i < s.length; i++) {
          assertEquals(RiTa.conjugate(s[i], args), a[i]);
        }

        /////////////////////////////////////////////////

        args = {
          number: RiTa.SINGULAR,
          person: RiTa.FIRST_PERSON,
          tense: RiTa.PAST_TENSE
        };

        assertEquals(RiTa.conjugate("swim", args), "swam");

        s = new String{"swim", "need", "open", ""};
        a = new String{"swam", "needed", "opened", ""};

        ok(a.length === s.length);

        for (int i = 0; i < s.length; i++) {
          let c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          number: RiTa.PLURAL,
          person: RiTa.SECOND_PERSON,
          tense: RiTa.PAST_TENSE
        };

        a = new String{"swam", "needed", "opened", ""};
        ok(a.length === s.length);

        for (int i = 0; i < s.length; i++) {
          assertEquals(RiTa.conjugate(s[i], args), a[i]);
        }

        args = {
          number: RiTa.PLURAL,
          person: RiTa.SECOND_PERSON,
          tense: RiTa.FUTURE_TENSE
        };
        a = new String{"will swim", "will need", "will open", ""};
        ok(a.length === s.length);

        for (int i = 0; i < s.length; i++) {
          assertEquals(RiTa.conjugate(s[i], args), a[i]);
        }

        args = {
          tense: RiTa.PAST_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON
        };
        a = new String{"swam", "needed", "opened", ""};

        ok(a.length === s.length);

        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          tense: RiTa.PAST_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON,
          form: RiTa.INFINITIVE
        };
        a = new String{"to swim", "to need", "to open", ""};
        ok(a.length === s.length);
        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          tense: RiTa.PAST_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON,
          passive: true
        };

        s = new String{"scorch", "burn", "hit", ""};
        a = new String{"was scorched", "was burned", "was hit", ""};
        ok(a.length === s.length);
        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        s = new String{"swim", "need", "open", ""};
        args = {
          tense: RiTa.PRESENT_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON,
          form: RiTa.INFINITIVE,
          progressive: true
        };
        a = new String[]{"to be swimming", "to be needing", "to be opening", ""};
        ok(a.length === s.length);
        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          tense: RiTa.PRESENT_TENSE,
          number: RiTa.SINGULAR,
          person: RiTa.THIRD_PERSON,
          form: RiTa.INFINITIVE,
          perfect: true
        };

        a = new String{"to have swum", "to have needed", "to have opened", ""};
        ok(a.length === s.length);
        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }

        args = {
          number: RiTa.PLURAL,
          person: RiTa.SECOND_PERSON,
          tense: RiTa.PAST_TENSE
        };
        assertEquals(RiTa.conjugate("barter", args), "bartered");
        assertEquals(RiTa.conjugate("run", args), "ran");

        s = new String{"compete", "complete", "eject"};
        a = new String{"competed", "completed", "ejected"};
        ok(a.length === s.length);
        for (int i = 0; i < s.length; i++) {
          c = RiTa.conjugate(s[i], args);
          assertEquals(c, a[i]);
        }
      }
}
