/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rita.test;

import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import rita.RiTa;

public class AnalyzerTests {

	@Test
	public void testAnalyze() {

		// analyze()

		Map<String, String> hm = new HashMap<String, String>();

		hm.put("tokens", "");
		hm.put("pos", "");
		hm.put("stresses", "");
		hm.put("phonemes", "");
		hm.put("syllables", "");

		// hm = Collections.unmodifiableMap(hm);
		System.out.println(RiTa.analyze(""));
		assertEquals(RiTa.analyze(""), hm);

		Map<String, String> feats;
		feats = RiTa.analyze("clothes");
		assertEquals(feats.get("pos"), "nns");
		assertEquals(feats.get("tokens"), "clothes");
		assertEquals(feats.get("syllables"), "k-l-ow-dh-z");

		feats = RiTa.analyze("the clothes");
		assertEquals(feats.get("pos"), "dt nns");
		assertEquals(feats.get("tokens"), "the clothes");
		assertEquals(feats.get("syllables"), "dh-ah k-l-ow-dh-z");

		feats = RiTa.analyze("chevrolet");
		assertEquals(feats.get("tokens"), "chevrolet");
		assertEquals(feats.get("syllables"), "sh-eh-v/r-ow/l-ey");

		// analyze(lts)

		feats = RiTa.analyze("cloze");
		assertEquals(feats.get("pos"), "nn");
		assertEquals(feats.get("tokens"), "cloze");
		assertEquals(feats.get("syllables"), "k-l-ow-z");

	}

	@Test
	public void testStresses() {

		String result, answer;

		result = RiTa.stresses("");
		answer = "";
		assertEquals(result, answer);

		result = RiTa.stresses("The emperor had no clothes on");
		answer = "0 1/0/0 1 1 1 1";
		assertEquals(result, answer);

		result = RiTa.stresses("The emperor had no clothes on.");
		answer = "0 1/0/0 1 1 1 1 .";
		assertEquals(result, answer);

		result = RiTa.stresses("The emperor had no clothes on. The King is fat.");
		answer = "0 1/0/0 1 1 1 1 . 0 1 1 1 .";
		assertEquals(result, answer);

		result = RiTa.stresses("to preSENT, to exPORT, to deCIDE, to beGIN");
		answer = "1 1/0 , 1 1/0 , 1 0/1 , 1 0/1";
		assertEquals(result, answer);

		result = RiTa.stresses("to present, to export, to decide, to begin");
		answer = "1 1/0 , 1 1/0 , 1 0/1 , 1 0/1";
		assertEquals(result, answer);

		result = RiTa.stresses("The dog ran faster than the other dog.  But the other dog was prettier.");
		answer = "0 1 1 1/0 1 0 1/0 1 . 1 0 1/0 1 1 1/0/0 .";
		assertEquals(result, answer);

		assertEquals(RiTa.stresses("chevrolet"), "0/0/1");
		assertEquals(RiTa.stresses("women"), "1/0");
		assertEquals(RiTa.stresses("genuine"), "1/0/0");

	}

	@Test
	public void testPhonemes() {

		String result, answer;

		result = RiTa.phonemes("");
		answer = "";
		assertEquals(result, answer);

		result = RiTa.phonemes("The");
		answer = "dh-ah";
		assertEquals(result, answer);

		result = RiTa.phonemes("said");
		answer = "s-eh-d";
		assertEquals(result, answer);

		result = RiTa.phonemes("The.");
		answer = "dh-ah .";
		assertEquals(result, answer);

		result = RiTa.phonemes("The boy jumped over the wild dog.");
		answer = "dh-ah b-oy jh-ah-m-p-t ow-v-er dh-ah w-ay-l-d d-ao-g .";
		assertEquals(result, answer);

		result = RiTa.phonemes("The boy ran to the store.");
		answer = "dh-ah b-oy r-ae-n t-uw dh-ah s-t-ao-r .";
		assertEquals(result, answer);

		result = RiTa.phonemes("The dog ran faster than the other dog.  But the other dog was prettier.");
		answer = "dh-ah d-ao-g r-ae-n f-ae-s-t-er dh-ae-n dh-ah ah-dh-er d-ao-g . b-ah-t dh-ah ah-dh-er d-ao-g w-aa-z p-r-ih-t-iy-er .";
		assertEquals(result, answer);

		result = RiTa.phonemes("flowers");
		answer = "f-l-aw-er-z";
		assertEquals(result, answer);

		result = RiTa.phonemes("quiche");
		answer = "k-iy-sh";
		assertEquals(result, answer);

		result = RiTa.phonemes("mice");
		answer = "m-ay-s";
		assertEquals(result, answer);

		assertEquals(RiTa.phonemes("chevrolet"), "sh-eh-v-r-ow-l-ey");
		assertEquals(RiTa.phonemes("women"), "w-ih-m-eh-n");
		assertEquals(RiTa.phonemes("genuine"), "jh-eh-n-y-uw-w-ah-n");

	}

	@Test
	public void testSyllables() {
		// syllables()

		assertEquals(RiTa.syllables("clothes"), "k-l-ow-dh-z");

		assertEquals(RiTa.syllables(""), "");
		assertEquals(RiTa.syllables("chevrolet"), "sh-eh-v/r-ow/l-ey");

		assertEquals(RiTa.syllables("women"), "w-ih/m-eh-n");
		assertEquals(RiTa.syllables("genuine"), "jh-eh-n/y-uw/w-ah-n");

		String input, expected;

		input = "The emperor had no clothes on.";
		expected = "dh-ah eh-m/p-er/er hh-ae-d n-ow k-l-ow-dh-z aa-n .";
		assertEquals(RiTa.syllables(input), expected);

		input = "The dog ran faster than the other dog. But the other dog was prettier.";
		expected = "dh-ah d-ao-g r-ae-n f-ae/s-t-er dh-ae-n dh-ah ah/dh-er d-ao-g . b-ah-t dh-ah ah/dh-er d-ao-g w-aa-z p-r-ih/t-iy/er .";
		assertEquals(RiTa.syllables(input), expected);

		input = "The dog ran faster than the other dog. But the other dog was prettier.";
		expected = "dh-ah d-ao-g r-ae-n f-ae/s-t-er dh-ae-n dh-ah ah/dh-er d-ao-g . b-ah-t dh-ah ah/dh-er d-ao-g w-aa-z p-r-ih/t-iy/er .";
		assertEquals(RiTa.syllables(input), expected);

		input = "The emperor had no clothes on.";
		expected = "dh-ah eh-m/p-er/er hh-ae-d n-ow k-l-ow-dh-z aa-n .";
		assertEquals(RiTa.syllables(input), expected);

		// syllables(lts)
		RiTa.SILENCE_LTS = true; // TODO : not implemented yet?
		assertEquals(RiTa.syllables("The Laggin Dragon"), "dh-ah l-ae/g-ih-n d-r-ae/g-ah-n");
		RiTa.SILENCE_LTS = false;

	}
}
