/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package rita.test;

import static org.junit.jupiter.api.Assertions.*;

import rita.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;

public class AnalyzerTests { // NOT IN SYNC WITH JS

	@Test
	public void callSingularize() {

		String[] tests = {
				"media", "medium",
				"millennia", "millennium",
				"consortia", "consortium",
				"concerti", "concerto",
				"septa", "septum",
				"termini", "terminus",
				"larvae", "larva",
				"vertebrae", "vertebra",
				"memorabilia", "memorabilium",
				"hooves", "hoof",
				"thieves", "thief",
				"rabbis", "rabbi",
				"flu", "flu",
				"safaris", "safari",
				"sheaves", "sheaf",
				"uses", "use",
				"pinches", "pinch",
				"catharses", "catharsis",
				"hankies", "hanky"
		};
		for (int i = 0; i < tests.length; i += 2) {
			// System.out.println("p: " + RiTa.singularize(tests[i])
			// + " s: " + tests[i + 1]);
			eq(RiTa.singularize(tests[i]), tests[i + 1]);
		}

		eq(RiTa.singularize("whizzes"), "whiz");
		eq(RiTa.singularize("selves"), "self");
		eq(RiTa.singularize("bookshelves"), "bookshelf");
		eq(RiTa.singularize("wheezes"), "wheeze");
		eq(RiTa.singularize("diagnoses"), "diagnosis");

		eq(RiTa.singularize("blondes"), "blonde");
		eq(RiTa.singularize("eyes"), "eye");
		eq(RiTa.singularize("swine"), "swine");
		eq(RiTa.singularize("cognoscenti"), "cognoscenti");
		eq(RiTa.singularize("bonsai"), "bonsai");
		eq(RiTa.singularize("taxis"), "taxi");
		eq(RiTa.singularize("chiefs"), "chief");
		eq(RiTa.singularize("monarchs"), "monarch");
		eq(RiTa.singularize("lochs"), "loch");
		eq(RiTa.singularize("stomachs"), "stomach");

		eq(RiTa.singularize("Chinese"), "Chinese");

		eq(RiTa.singularize("people"), "person");
		eq(RiTa.singularize("money"), "money");
		eq(RiTa.singularize("vertebrae"), "vertebra");
		eq(RiTa.singularize("humans"), "human");
		eq(RiTa.singularize("germans"), "german");
		eq(RiTa.singularize("romans"), "roman");

		eq(RiTa.singularize("memoranda"), "memorandum");
		eq(RiTa.singularize("data"), "datum");
		eq(RiTa.singularize("appendices"), "appendix");
		eq(RiTa.singularize("theses"), "thesis");
		eq(RiTa.singularize("alumni"), "alumnus");

		eq(RiTa.singularize("solos"), "solo");
		eq(RiTa.singularize("music"), "music");

		eq(RiTa.singularize("oxen"), "ox");
		eq(RiTa.singularize("beef"), "beef");

		eq(RiTa.singularize("tobacco"), "tobacco");
		eq(RiTa.singularize("cargo"), "cargo");
		eq(RiTa.singularize("golf"), "golf");
		eq(RiTa.singularize("grief"), "grief");

		eq(RiTa.singularize("cakes"), "cake");

		eq(RiTa.singularize("dogs"), "dog");
		eq(RiTa.singularize("feet"), "foot");
		eq(RiTa.singularize("teeth"), "tooth");
		eq(RiTa.singularize("kisses"), "kiss");
		eq(RiTa.singularize("children"), "child");
		eq(RiTa.singularize("randomwords"), "randomword");
		eq(RiTa.singularize("deer"), "deer");
		eq(RiTa.singularize("sheep"), "sheep");
		eq(RiTa.singularize("shrimp"), "shrimp");

		eq(RiTa.singularize("tomatoes"), "tomato");
		eq(RiTa.singularize("photos"), "photo");

		eq(RiTa.singularize("toes"), "toe");

		eq(RiTa.singularize("series"), "series");
		eq(RiTa.singularize("men"), "man");
		eq(RiTa.singularize("mice"), "mouse");
		eq(RiTa.singularize("lice"), "louse");

		eq(RiTa.singularize("gases"), "gas");
		eq(RiTa.singularize("buses"), "bus");
		eq(RiTa.singularize("happiness"), "happiness");

		eq(RiTa.singularize("crises"), "crisis");
		eq(RiTa.singularize("apotheses"), "apothesis");
		eq(RiTa.singularize("stimuli"), "stimulus");
		eq(RiTa.singularize("corpora"), "corpus");

		eq(RiTa.singularize("women"), "woman");
		eq(RiTa.singularize("congressmen"), "congressman");
		eq(RiTa.singularize("aldermen"), "alderman");
		eq(RiTa.singularize("freshmen"), "freshman");
		eq(RiTa.singularize("firemen"), "fireman");
		eq(RiTa.singularize("grandchildren"), "grandchild");
		eq(RiTa.singularize("menus"), "menu");
		eq(RiTa.singularize("gurus"), "guru");

		eq(RiTa.singularize("hardness"), "hardness");
		eq(RiTa.singularize("shortness"), "shortness");
		eq(RiTa.singularize("dreariness"), "dreariness");
		eq(RiTa.singularize("unwillingness"), "unwillingness");
		eq(RiTa.singularize("fish"), "fish");
		eq(RiTa.singularize("ooze"), "ooze");

		eq(RiTa.singularize("enterprises"), "enterprise");
		eq(RiTa.singularize("treatises"), "treatise");
		eq(RiTa.singularize("houses"), "house");
		eq(RiTa.singularize("chemises"), "chemise");

		eq(RiTa.singularize("aquatics"), "aquatics");
		eq(RiTa.singularize("mechanics"), "mechanics");
		eq(RiTa.singularize("quarters"), "quarter");
	}

	@Test
	public void callPluralize() {
		String[] tests = {
			"media", "medium",
			"millennia", "millennium",
			"consortia", "consortium",
			"concerti", "concerto",
			"septa", "septum",
			"termini", "terminus",
			"larvae", "larva",
			"vertebrae", "vertebra",
			"memorabilia", "memorabilium",
			"sheaves", "sheaf",
			"spoofs", "spoof",
			"proofs", "proof",
			"roofs", "roof",
			"disbeliefs", "disbelief",
			"indices", "index",
			"accomplices", "accomplice",
			"hooves", "hoof",
			"thieves", "thief",
			"rabbis", "rabbi",
			"flu", "flu",
			"safaris", "safari",
			"sheaves", "sheaf",
			"uses", "use",
			"pinches", "pinch",
			"catharses", "catharsis",
			"hankies", "hanky",
			"whizzes", "whiz",
			"selves", "self",
			"bookshelves", "bookshelf",
			"wheezes", "wheeze",
			"diagnoses", "diagnosis",
			"blondes", "blonde",
			"eyes", "eye",
			"swine", "swine",
			"cognoscenti", "cognoscenti",
			"bonsai", "bonsai",
			"taxis", "taxi",
			"chiefs", "chief",
			"monarchs", "monarch",
			"lochs", "loch",
			"stomachs", "stomach",
			"Chinese", "Chinese",
			"people", "person",
			"money", "money",
			"vertebrae", "vertebra",
			"humans", "human",
			"germans", "german",
			"romans", "roman",
			"memoranda", "memorandum",
			"data", "datum",
			"appendices", "appendix",
			"theses", "thesis",
			"alumni", "alumnus",
			"solos", "solo",
			"music", "music",
			"oxen", "ox",
			"beef", "beef",
			"tobacco", "tobacco",
			"cargo", "cargo",
			"golf", "golf",
			"grief", "grief",
			"cakes", "cake",
			"dog", "dog",
			"feet", "foot",
			"teeth", "tooth",
			"kisses", "kiss",
			"children", "child",
			"randomwords", "randomword",
			"deer", "deer",
			"sheep", "sheep",
			"shrimp", "shrimp",
			"tomatoes", "tomato",
			"photos", "photo",
			"toes", "toe",
			"series", "series",
			"men", "man",
			"mice", "mouse",
			"lice", "louse",
			"gases", "gas",
			"buses", "bus",
			"happiness", "happiness",
			"crises", "crisis",
			"apotheses", "apothesis",
			"stimuli", "stimulus",
			"corpora", "corpus",
			"women", "woman",
			"congressmen", "congressman",
			"aldermen", "alderman",
			"freshmen", "freshman",
			"firemen", "fireman",
			"grandchildren", "grandchild",
			"menus", "menu",
			"gurus", "guru",
			"hardness", "hardness",
			"shortness", "shortness",
			"dreariness", "dreariness",
			"unwillingness", "unwillingness",
			"fish", "fish",
			"ooze", "ooze",
			"enterprises", "enterprise",
			"treatises", "treatise",
			"houses", "house",
			"chemises", "chemise",
			"aquatics", "aquatics",
			"mechanics", "mechanics",
			"quarters", "quarter"
		};
		for (int i = 0; i < tests.length; i += 2) {
			//System.out.println(i+") " + tests[i]+" -> "+RiTa.pluralize(tests[i + 1]));
			eq(RiTa.pluralize(tests[i + 1]), tests[i]);
		}

		// uncountable
		tests = new String[] {
				"turf", "macaroni", "spaghetti", "potpourri", "electrolysis"
		};
		for (int i = 0; i < tests.length; i++) {
			eq(RiTa.pluralize(tests[i]), tests[i]);
		}
	}

	@Test
	public void handleSingularPluralPairs() {

		String[] testPairs = {
				"dazes", "daze",
				"hives", "hive",
				"dives", "dive",
				"octopuses", "octopus",
				"abalone", "abalone",
				"wildlife", "wildlife",
				"media", "medium",
				"millennia", "millennium",
				"consortia", "consortium",
				"concerti", "concerto",
				"septa", "septum",
				"termini", "terminus",
				"larvae", "larva",
				"vertebrae", "vertebra",
				"hooves", "hoof",
				"thieves", "thief",
				"rabbis", "rabbi",
				"flu", "flu",
				"safaris", "safari",
				"sheaves", "sheaf",
				"uses", "use",
				"pinches", "pinch",
				"hankies", "hanky",
				"spoofs", "spoof",
				"proofs", "proof",
				"roofs", "roof",
				"disbeliefs", "disbelief",
				"beliefs", "belief",
				"indices", "index",
				"accomplices", "accomplice",
				"catharses", "catharsis",
				"prognoses", "prognosis",
				"whizzes", "whiz",
				"selves", "self",
				"bookshelves", "bookshelf",
				"wheezes", "wheeze",
				"diagnoses", "diagnosis",
				"blondes", "blonde",
				"eyes", "eye",
				"swine", "swine",
				"cognoscenti", "cognoscenti",
				"bonsai", "bonsai",
				"taxis", "taxi",
				"chiefs", "chief",
				"monarchs", "monarch",
				"lochs", "loch",
				"stomachs", "stomach",
				"Chinese", "Chinese",
				"people", "person",
				"humans", "human",
				"germans", "german",
				"romans", "roman",
				"memoranda", "memorandum",
				"data", "datum",
				"geese", "goose",
				"femurs", "femur",
				"appendices", "appendix",
				"theses", "thesis",
				"alumni", "alumnus",
				"solos", "solo",
				"music", "music",
				"oxen", "ox",
				"solos", "solo",
				"music", "music",
				"money", "money",
				"beef", "beef",
				"tobacco", "tobacco",
				"cargo", "cargo",
				"golf", "golf",
				"grief", "grief",
				"cakes", "cake",
				"tomatoes", "tomato",
				"photos", "photo",
				"smallpox", "smallpox",
				"toes", "toe",
				"series", "series",
				"oxen", "ox",
				"men", "man",
				"mice", "mouse",
				"lice", "louse",
				"children", "child",
				"gases", "gas",
				"buses", "bus",
				"happiness", "happiness",
				"crises", "crisis",
				"theses", "thesis",
				"apotheses", "apothesis",
				"stimuli", "stimulus",
				"alumni", "alumnus",
				"corpora", "corpus",
				"dogs", "dog",
				"feet", "foot",
				"teeth", "tooth",
				"kisses", "kiss",
				"deer", "deer",
				"sheep", "sheep",
				"shrimp", "shrimp",
				"men", "man",
				"women", "woman",
				"congressmen", "congressman",
				"aldermen", "alderman",
				"freshmen", "freshman",
				"firemen", "fireman",
				"grandchildren", "grandchild",
				"menus", "menu",
				"gurus", "guru",
				"hardness", "hardness",
				"shortness", "shortness",
				"dreariness", "dreariness",
				"unwillingness", "unwillingness",
				"fish", "fish",
				"ooze", "ooze",
				"enterprises", "enterprise",
				"treatises", "treatise",
				"houses", "house",
				"chemises", "chemise",
				"aquatics", "aquatics",
				"mechanics", "mechanics",
				"quarters", "quarter",
				"motifs", "motif",
				"alumni", "alumnus",
				"turf", "turf",
				"macaroni", "macaroni",
				"spaghetti", "spaghetti",
				"potpourri", "potpourri",
				"electrolysis", "electrolysis",
				"eyes", "eye",
				"teeth", "tooth",
				"cakes", "cake",
				"kisses", "kiss",
				"lice", "louse",
				"series", "series",
				"crises", "crisis",
				"theses", "thesis",
				"apotheses", "apothesis",
				"stimuli", "stimulus",
				"alumni", "alumnus",
				"corpora", "corpus",
				"menus", "menu",
				"hardness", "hardness",
				"shortness", "shortness",
				"dreariness", "dreariness",
				"unwillingness", "unwillingness",
				"moose", "moose",
				"toes", "toe",
				"tobacco", "tobacco",
				"cargo", "cargo",
				"golf", "golf",
				"grief", "grief",
				"taxis", "taxi",
				"bonsai", "bonsai",
				"lives", "life",
				"additives", "additive",
				"epochs", "epoch",
				"ranchs", "ranch",
				"alcoves", "alcove",
				"goddesses", "goddess",
				"tresses", "tress",
				"murderesses", "murderess",
				"memories", "memory",
				"corpora", "corpus",
				"stimuli", "stimulus",
				"theses", "thesis"
		};

		String res1, res2;
		boolean res3, dbug = false;

		for (int i = 0; i < testPairs.length; i += 2) {

			if (dbug) console.log(testPairs[i] + "/" + testPairs[i + 1]);

			res1 = Inflector.singularize(testPairs[i], Util.opts("dbug", dbug));
			res2 = Inflector.pluralize(testPairs[i + 1], Util.opts("dbug", dbug));
			res3 = Inflector.isPlural(testPairs[i], dbug);

			// singularize
			eq(res1, testPairs[i + 1], "FAIL: singularize(" + testPairs[i]
					+ ") was " + res1 + ", but expected " + testPairs[i + 1] + "\n        "
					+ "pluralize(" + testPairs[i + 1] + ") was " + res2 + "\n\n");

			// pluralize
			eq(res2, testPairs[i], "FAIL: pluralize(" + testPairs[i + 1]
					+ ") was " + res2 + ", but expected " + testPairs[i] + "\n        "
					+ "singularize(" + testPairs[i] + ") was " + res1 + "\n\n");

			// isPlural
			assertTrue(res3, "FAIL: isPlural(" + testPairs[i] + ") was false\n\n");
		}
	}

	@Test
	public void callAnalyzeLts() {
		// failing bc of testComputePhones (above)
		Map<String, String> feats = RiTa.analyze("cloze");
		eq(feats.get("pos"), "nn");
		eq(feats.get("tokens"), "cloze");
		eq(feats.get("syllables"), "k-l-ow-z");
	}

	@Test
	public void callAnalyze() {

		Map<String, String> feats;

		// analyze()
		Map<String, String> hm = new HashMap<String, String>();
		hm.put("pos", "");
		hm.put("phones", "");
		hm.put("tokens", "");
		hm.put("stresses", "");
		hm.put("syllables", "");

		// System.out.println(RiTa.analyze(""));
		assertEquals(RiTa.analyze(""), hm);

		feats = RiTa.analyze("clothes");

		eq(feats.get("pos"), "nns");
		eq(feats.get("tokens"), "clothes");
		eq(feats.get("syllables"), "k-l-ow-dh-z");

		feats = RiTa.analyze("the clothes");

		eq(feats.get("pos"), "dt nns");
		eq(feats.get("tokens"), "the clothes");
		eq(feats.get("syllables"), "dh-ah k-l-ow-dh-z");

		feats = RiTa.analyze("chevrolet");
		eq(feats.get("tokens"), "chevrolet");
		eq(feats.get("syllables"), "sh-eh-v/r-ow/l-ey");
	}

	@Test
	public void callStresses() {

		String result, answer;

		result = RiTa.stresses("");
		answer = "";
		eq(result, answer);

		result = RiTa.stresses("The emperor had no clothes on");
		answer = "0 1/0/0 1 1 1 1";
		eq(result, answer);

		result = RiTa.stresses("The emperor had no clothes on.");
		answer = "0 1/0/0 1 1 1 1 .";
		eq(result, answer);

		result = RiTa.stresses("The emperor had no clothes on. The King is fat.");
		answer = "0 1/0/0 1 1 1 1 . 0 1 1 1 .";
		eq(result, answer);

		result = RiTa.stresses("to preSENT, to exPORT, to deCIDE, to beGIN");
		answer = "1 1/0 , 1 1/0 , 1 0/1 , 1 0/1";
		eq(result, answer);

		result = RiTa.stresses("to present, to export, to decide, to begin");
		answer = "1 1/0 , 1 1/0 , 1 0/1 , 1 0/1";
		eq(result, answer);

		result = RiTa.stresses("The dog ran faster than the other dog.  But the other dog was prettier.");
		answer = "0 1 1 1/0 1 0 1/0 1 . 1 0 1/0 1 1 1/0/0 .";
		eq(result, answer);

		eq(RiTa.stresses("chevrolet"), "0/0/1");
		eq(RiTa.stresses("women"), "1/0");
		eq(RiTa.stresses("abatements"), "0/1/0", "abatements");
		eq(RiTa.stresses("genuine"), "1/0/0");

	}

	@Test
	public void callPhonemes() {

		String result, answer;

		result = RiTa.phones("");
		answer = "";
		eq(result, answer);

		result = RiTa.phones("b");
		answer = "b";
		eq(result, answer);

		result = RiTa.phones("B");
		answer = "b";
		eq(result, answer);

		result = RiTa.phones("The");
		answer = "dh-ah";
		eq(result, answer);

		result = RiTa.phones("said");
		answer = "s-eh-d";
		eq(result, answer);

		result = RiTa.phones("The.");
		answer = "dh-ah .";
		eq(result, answer);

		result = RiTa.phones("The boy jumped over the wild dog.");
		answer = "dh-ah b-oy jh-ah-m-p-t ow-v-er dh-ah w-ay-l-d d-ao-g .";
		eq(result, answer);

		result = RiTa.phones("The boy ran to the store.");
		answer = "dh-ah b-oy r-ae-n t-uw dh-ah s-t-ao-r .";
		eq(result, answer);

		result = RiTa.phones("The dog ran faster than the other dog.  But the other dog was prettier.");
		answer = "dh-ah d-ao-g r-ae-n f-ae-s-t-er dh-ae-n dh-ah ah-dh-er d-ao-g . b-ah-t dh-ah ah-dh-er d-ao-g w-aa-z p-r-ih-t-iy-er .";
		eq(result, answer);

		result = RiTa.phones("flowers");
		answer = "f-l-aw-er-z";
		eq(result, answer);

		result = RiTa.phones("quiche");
		answer = "k-iy-sh";
		eq(result, answer);

		result = RiTa.phones("mice");
		answer = "m-ay-s";
		eq(result, answer);

		eq(RiTa.phones("chevrolet"), "sh-eh-v-r-ow-l-ey");
		eq(RiTa.phones("women"), "w-ih-m-eh-n");
		eq(RiTa.phones("genuine"), "jh-eh-n-y-uw-w-ah-n");

	}

	@Test
	public void callSyllableLts() {
		String result = RiTa.syllables("The Laggin");
		eq(result, "dh-ah l-ae/g-ih-n", "got '" + result + "'");
	}

	@Test
	public void callSyllables() {
		// syllables()

		eq(RiTa.syllables("clothes"), "k-l-ow-dh-z");

		eq(RiTa.syllables(""), "");
		eq(RiTa.syllables("chevrolet"), "sh-eh-v/r-ow/l-ey");

		eq(RiTa.syllables("women"), "w-ih/m-eh-n");
		eq(RiTa.syllables("genuine"), "jh-eh-n/y-uw/w-ah-n");

		String input, expected;

		input = "The emperor had no clothes on.";
		expected = "dh-ah eh-m/p-er/er hh-ae-d n-ow k-l-ow-dh-z aa-n .";
		eq(RiTa.syllables(input), expected);

		input = "The dog ran faster than the other dog. But the other dog was prettier.";
		expected = "dh-ah d-ao-g r-ae-n f-ae/s-t-er dh-ae-n dh-ah ah/dh-er d-ao-g . b-ah-t dh-ah ah/dh-er d-ao-g w-aa-z p-r-ih/t-iy/er .";
		eq(RiTa.syllables(input), expected);

		input = "The dog ran faster than the other dog. But the other dog was prettier.";
		expected = "dh-ah d-ao-g r-ae-n f-ae/s-t-er dh-ae-n dh-ah ah/dh-er d-ao-g . b-ah-t dh-ah ah/dh-er d-ao-g w-aa-z p-r-ih/t-iy/er .";
		eq(RiTa.syllables(input), expected);

		input = "The emperor had no clothes on.";
		expected = "dh-ah eh-m/p-er/er hh-ae-d n-ow k-l-ow-dh-z aa-n .";
		eq(RiTa.syllables(input), expected);

		RiTa.SILENCE_LTS = true;
		//System.out.println(RiTa.syllables("The Laggin Dragon"));
		eq(RiTa.syllables("The Laggin Dragon"), "dh-ah l-ae/g-ih-n d-r-ae/g-ah-n");
		RiTa.SILENCE_LTS = false;
	}

	static void eq(String a, String b) {
		eq(a, b, "");
	}

	static void eq(String a, String b, String msg) {
		assertEquals(b, a, msg);
	}
}
